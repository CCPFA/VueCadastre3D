{"version":3,"file":"itowns_widgets.js","mappings":"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","sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/./utils/gui/Widget.js","webpack://[name]/./utils/gui/Navigation.js","webpack://[name]/./utils/gui/Minimap.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"itowns_widgets\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"itowns_widgets\"] = factory();\n\telse\n\t\troot[\"itowns_widgets\"] = factory();\n})(self, function() {\nreturn ","import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\nvar Widget = /*#__PURE__*/_createClass(function Widget(view) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var defaultOptions = arguments.length > 2 ? arguments[2] : undefined;\n\n  _classCallCheck(this, Widget);\n\n  this.parentElement = options.parentElement || view.domElement;\n  this.position = options.position || defaultOptions.position;\n\n  if (!['top-left', 'top-right', 'bottom-left', 'bottom-right', 'top', 'bottom', 'left', 'right'].includes(this.position)) {\n    console.warn('\\'position\\' optional parameter for \\'Widget\\' constructor is not a valid option. ' + \"It will be set to '\".concat(defaultOptions.position, \"'.\"));\n    this.position = defaultOptions.position;\n  } // ---------- CREATE A DomElement WITH id, classes AND style RELEVANT TO THE WIDGET PROPERTIES : ----------\n  // Create a div containing minimap widget and add it to its specified parent.\n\n\n  this.domElement = document.createElement('div');\n  this.parentElement.appendChild(this.domElement); // Size widget according to options.\n\n  this.domElement.style.width = \"\".concat(options.width || options.size || defaultOptions.width, \"px\");\n  this.domElement.style.height = \"\".concat(options.height || options.size || defaultOptions.height, \"px\"); // Position widget according to options.\n\n  var positionArray = this.position.split('-');\n  this.domElement.classList.add(\"\".concat(positionArray[0], \"-widget\"));\n\n  if (positionArray[1]) {\n    this.domElement.classList.add(\"\".concat(positionArray[1], \"-widget\"));\n  } else {\n    // If only one position parameter was given, center the domElement on the other axis.\n    // TODO : at this stage, offsetWidth and offsetHeight do no include borders. This should be worked around.\n    switch (positionArray[0]) {\n      case 'top':\n      case 'bottom':\n        this.domElement.style.left = \"calc(50% - \".concat(this.domElement.offsetWidth / 2, \"px)\");\n        break;\n\n      case 'left':\n      case 'right':\n        this.domElement.style.top = \"calc(50% - \".concat(this.domElement.offsetHeight / 2, \"px)\");\n        break;\n\n      default:\n        break;\n    }\n  } // Translate widget div according to optional translate parameter.\n\n\n  if (options.translate) {\n    this.domElement.style.transform = \"translate(\".concat(options.translate.x || 0, \"px, \").concat(options.translate.y || 0, \"px)\");\n  }\n});\n\nexport default Widget;","import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { VIEW_EVENTS } from \"../../src/Core/View\";\nimport Widget from \"./Widget\";\nvar DEFAULT_OPTIONS = {\n  parentElement: document.body,\n  displayCompass: true,\n  display3DToggle: true,\n  displayZoomIn: true,\n  displayZoomOut: true,\n  animationDuration: 500,\n  position: 'bottom-left',\n  direction: 'column'\n};\n/**\n * A widget menu manager for navigation.\n *\n * @property {HTMLElement}  domElement      An html div containing all navigation widgets.\n * @property {HTMLElement}  parentElement   The parent HTML container of `this.domElement`.\n */\n\nvar Navigation = /*#__PURE__*/function (_Widget) {\n  _inherits(Navigation, _Widget);\n\n  var _super = _createSuper(Navigation);\n\n  /**\n   * @param   {View}          view                                    The iTowns view the navigation should be linked\n                                                                      * to.\n   * @param   {Object}        options                                 The navigation menu optional configuration.\n   * @param   {HTMLElement}   [options.parentElement=document.body]   The parent HTML container of the div which\n                                                                      * contains navigation widgets.\n   * @param   {boolean}       [options.displayCompass=true]           Whether the compass widget should be displayed.\n   * @param   {boolean}       [options.display3DToggle=true]          Whether the navigation should include a widget\n                                                                      * to toggle between top and oblique view.\n   * @param   {boolean}       [options.displayZoomIn=true]            Whether the zoom-in widget should be displayed.\n   * @param   {boolean}       [options.displayZoomOut=true]           Whether the zoom-out widget should be displayed.\n   * @param   {number}        [options.animationDuration=500]         The duration of travel animations, when clicking\n                                                                      * navigation widgets.\n   * @param   {string}        [options.position='bottom-left']        Defines which corner of the `parentElement` the\n                                                                      * navigation menu should be displayed to.\n                                                                      * Possible values are `top-left`, `top-right`,\n                                                                      * `bottom-left` and `bottom-right`. If the input\n                                                                      * value does not match one of these, it will be\n                                                                      * defaulted to `bottom-left`.\n   * @param   {string}        [options.direction='column']            Whether the navigation menu should expand\n                                                                      * horizontally or vertically. Possible values\n                                                                      * are `column` and `row`. If the input value\n                                                                      * does not match one of these, it will be\n                                                                      * defaulted to `column`.\n   * @param   {Object}        [options.translate]                     An optional translation of the navigation menu.\n   * @param   {number}        [options.translate.x=0]                 The navigation menu translation along the page\n                                                                      * x-axis.\n   * @param   {number}        [options.translate.y=0]                 The navigation menu translation along the page\n                                                                      * y-axis.\n   */\n  function Navigation(view) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Navigation);\n\n    // ---------- BUILD PROPERTIES ACCORDING TO DEFAULT OPTIONS AND OPTIONS PASSED IN PARAMETERS : ----------\n    // `top`, `bottom`, `left` and `right` values for `position` option are not relevant for navigation widget.\n    if (['top', 'bottom', 'left', 'right'].includes(options.position)) {\n      console.warn('\\'position\\' optional parameter for \\'Navigation\\' is not a valid option. ' + \"It will be set to '\".concat(DEFAULT_OPTIONS.position, \"'.\"));\n      options.position = DEFAULT_OPTIONS.position;\n    }\n\n    _this = _super.call(this, view, options, DEFAULT_OPTIONS);\n    _this.direction = options.direction || DEFAULT_OPTIONS.direction;\n\n    if (!['column', 'row'].includes(_this.direction)) {\n      console.warn('\\'direction\\' optional parameter for \\'Navigation\\' constructor is not a valid option. ' + \"It will be set to '\".concat(DEFAULT_OPTIONS.direction, \"'.\"));\n      _this.direction = DEFAULT_OPTIONS.direction;\n    }\n\n    _this.animationDuration = options.animationDuration === undefined ? DEFAULT_OPTIONS.animationDuration : options.animationDuration; // ---------- CREATE A DomElement WITH id AND classes RELEVANT TO THE WIDGET PROPERTIES : ----------\n    // Create a div containing all widgets and add it to its specified parent.\n\n    _this.domElement.id = 'widgets-navigation'; // Position widget div according to options.\n\n    _this.domElement.classList.add(\"\".concat(_this.direction, \"-widget\")); // ---------- CREATE THE DEFAULT WIDGETS IF NOT HIDDEN (COMPASS, 3D AND ZOOM BUTTONS) : ----------\n    // Add a compass widget if requested.\n\n\n    if (options.displayCompass === undefined ? DEFAULT_OPTIONS.displayCompass : options.displayCompass) {\n      _this.compass = _this.addButton('compass', '', function () {\n        view.controls.lookAtCoordinate({\n          heading: 0,\n          tilt: 89.5,\n          time: _this.animationDuration\n        });\n      }, 'widgets'); // Manage compass rotation when the view's camera is moved.\n\n      view.addEventListener(VIEW_EVENTS.CAMERA_MOVED, function (event) {\n        _this.compass.style.transform = \"rotate(\".concat(-event.heading, \"deg)\");\n      });\n    } // Add a 3D toggle button if requested.\n\n\n    if (options.display3DToggle === undefined ? DEFAULT_OPTIONS.display3DToggle : options.display3DToggle) {\n      _this.switch3dButton = _this.addButton('3d-button', '3D', function () {\n        var tilt;\n\n        if (view.controls.getTilt() < 89) {\n          tilt = 89.5;\n        } else {\n          tilt = 40;\n        }\n\n        view.controls.lookAtCoordinate({\n          tilt: tilt,\n          time: _this.animationDuration\n        });\n      }); // Manage button content toggle when the view's camera is moved.\n\n      view.addEventListener(VIEW_EVENTS.CAMERA_MOVED, function (event) {\n        _this.switch3dButton.innerHTML = event.tilt < 89 ? '2D' : '3D';\n      });\n    } // Add a zoom-in button if requested.\n\n\n    if (options.displayZoomIn === undefined ? DEFAULT_OPTIONS.displayZoomIn : options.displayZoomIn) {\n      _this.zoomInButton = _this.addButton('zoom-in-button', '<span class=\"widget-zoom-button-logo\"></span>', function () {\n        view.controls.lookAtCoordinate({\n          zoom: Math.min(20, view.controls.getZoom() + 1),\n          time: _this.animationDuration\n        });\n      }, 'zoom-button-bar');\n    } // Add a zoom-out button if requested.\n\n\n    if (options.displayZoomOut === undefined ? DEFAULT_OPTIONS.displayZoomOut : options.displayZoomOut) {\n      _this.zoomOutButton = _this.addButton('zoom-out-button', '<span id=\"zoom-out-logo\" class=\"widget-zoom-button-logo\"></span>', function () {\n        view.controls.lookAtCoordinate({\n          zoom: Math.max(3, view.controls.getZoom() - 1),\n          time: _this.animationDuration\n        });\n      }, 'zoom-button-bar');\n    }\n\n    return _this;\n  }\n  /**\n   *\n   * @param   {string}    id              The unique id the created button should be given.\n   * @param   {string}    [content='']    An HTML string defining the content of the button.\n   * @param   {function}  [actionOnClick] The method that should be executed when the button is clicked on.\n   * @param   {string}    [parentId]      The unique id of a button bar in which the created button should be added.\n                                          * A button bar is a group which contains one or several buttons. All\n                                          * buttons created with Navigation are in a button bar. If the given id does\n                                          * not match an already existing button bar, a new button bar will be created\n                                          * with this id. If no id is given, a button bar will be created with no id.\n                                          * The later case can be useful for creating isolated buttons.\n   *\n   * @returns {HTMLButtonElement}     The created button.\n   */\n\n\n  _createClass(Navigation, [{\n    key: \"addButton\",\n    value: function addButton(id) {\n      var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var actionOnClick = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\n      var parentId = arguments.length > 3 ? arguments[3] : undefined;\n      var buttonBar = document.getElementById(parentId);\n\n      if (!buttonBar) {\n        buttonBar = this.addButtonBar(parentId);\n      }\n\n      var button = document.createElement('button');\n      button.className = 'widget-button';\n      button.id = id;\n      button.innerHTML = content;\n      buttonBar.appendChild(button);\n      button.addEventListener('click', actionOnClick);\n      return button;\n    }\n  }, {\n    key: \"addButtonBar\",\n    value: function addButtonBar(id) {\n      var buttonBar = document.createElement('div');\n      buttonBar.className = 'widget-button-bar';\n\n      if (id) {\n        buttonBar.id = id;\n      }\n\n      this.domElement.appendChild(buttonBar);\n      return buttonBar;\n    }\n  }]);\n\n  return Navigation;\n}(Widget);\n\nexport default Navigation;","import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Coordinates from \"../../src/Core/Geographic/Coordinates\";\nimport { MAIN_LOOP_EVENTS } from \"../../src/Core/MainLoop\";\nimport PlanarView from \"../../src/Core/Prefab/PlanarView\";\nimport { CAMERA_TYPE } from \"../../src/Renderer/Camera\";\nimport Widget from \"./Widget\";\nvar DEFAULT_OPTIONS = {\n  minScale: 1 / 500000,\n  maxScale: 1 / 5E8,\n  zoomRatio: 1 / 30,\n  width: 150,\n  height: 150,\n  position: 'bottom-left'\n};\n/**\n * A widget for minimap\n *\n * @property    {HTMLElement}   domElement      An html div containing the minimap.\n * @property    {HTMLElement}   parentElement   The parent HTML container of `this.domElement`.\n */\n\nvar Minimap = /*#__PURE__*/function (_Widget) {\n  _inherits(Minimap, _Widget);\n\n  var _super = _createSuper(Minimap);\n\n  /**\n   * @param   {GlobeView}             view                                    The iTowns view the minimap should be\n                                                                              * linked to. Only {@link GlobeView} is\n                                                                              * supported at the moment.\n   * @param   {ColorLayer}            layer                                   The {@link ColorLayer} that should be\n                                                                              * displayed on the minimap.\n   * @param   {Object}                [options]                               The minimap optional configuration.\n   * @param   {HTMLElement}           [options.parentElement=view.domElement] The parent HTML container of the div\n                                                                              * which contains minimap widgets.\n   * @param   {number}                [options.size]                          The size of the minimap. It is a number\n                                                                              * that describing both width and height\n                                                                              * in pixels of the minimap.\n   * @param   {number}                [options.width=150]                     The width in pixels of the minimap.\n   * @param   {number}                [options.height=150]                    The height in pixels of the minimap.\n   * @param   {string}                [options.position='bottom-left']        Defines which corner of the\n                                                                              * `parentElement` the minimap should be\n                                                                              * displayed to. Possible values are\n                                                                              * `top-left`, `top-right`, `bottom-left`\n                                                                              * and `bottom-right`. If the input value\n                                                                              * does not match one of these, it will\n                                                                              * be defaulted to `bottom-left`.\n   * @param   {Object}                [options.translate]                     An optional translation of the minimap.\n   * @param   {number}                [options.translate.x=0]                 The minimap translation along the page\n                                                                              * x-axis.\n   * @param   {number}                [options.translate.y=0]                 The minimap translation along the page\n                                                                              * y-axis.\n   * @param   {HTMLElement|string}    [options.cursor]                        An html element or an HTML string\n                                                                              * describing a cursor showing minimap\n                                                                              * view camera target position at the\n                                                                              * center of the minimap.\n   * @param   {number}                [options.minScale=1/2000]               The minimal scale the minimap can reach.\n   * @param   {number}                [options.maxScale=1/1_250_000]          The maximal scale the minimap can reach.\n   * @param   {number}                [options.zoomRatio=1/30]                The ratio between minimap camera zoom\n                                                                              * and view camera zoom.\n   * @param   {number}                [options.pitch=0.28]                    The screen pixel pitch, used to compute\n                                                                              * view and minimap scale.\n   */\n  function Minimap(view, layer) {\n    var _this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, Minimap);\n\n    // ---------- BUILD PROPERTIES ACCORDING TO DEFAULT OPTIONS AND OPTIONS PASSED IN PARAMETERS : ----------\n    if (!view.isGlobeView) {\n      throw new Error('\\'Minimap\\' plugin only supports \\'GlobeView\\'. Therefore, the \\'view\\' parameter must be a ' + '\\'GlobeView\\'.');\n    }\n\n    if (!layer.isColorLayer) {\n      throw new Error('\\'layer\\' parameter form \\'Minimap\\' constructor should be a \\'ColorLayer\\'.');\n    }\n\n    _this = _super.call(this, view, options, DEFAULT_OPTIONS);\n    _this.minScale = options.minScale || DEFAULT_OPTIONS.minScale;\n    _this.maxScale = options.maxScale || DEFAULT_OPTIONS.maxScale; // TODO : it could be interesting to be able to specify a method as zoomRatio parameter. This method could\n    //  return a zoom ratio from the scale of the minimap.\n\n    _this.zoomRatio = options.zoomRatio || DEFAULT_OPTIONS.zoomRatio; // ---------- this.domElement SETTINGS SPECIFIC TO MINIMAP : ----------\n\n    _this.domElement.id = 'widgets-minimap'; // Display a cursor at the center of the minimap, if requested.\n\n    if (options.cursor) {\n      // Wrap cursor domElement inside a div to center it in minimap.\n      var cursorWrapper = document.createElement('div');\n      cursorWrapper.id = 'cursor-wrapper';\n\n      _this.domElement.appendChild(cursorWrapper); // Add specified cursor to its wrapper.\n\n\n      if (typeof options.cursor === 'string') {\n        cursorWrapper.innerHTML = options.cursor;\n      } else if (options.cursor instanceof HTMLElement) {\n        cursorWrapper.appendChild(options.cursor);\n      }\n    } // ---------- CREATE A MINIMAP View AND DISPLAY DATA PASSED IN Layer PARAMETER : ----------\n\n\n    _this.view = new PlanarView(_this.domElement, layer.source.extent, {\n      camera: {\n        type: CAMERA_TYPE.ORTHOGRAPHIC\n      },\n      placement: layer.source.extent,\n      // TODO : the default placement should be the view extent for ortho camera\n      noControls: true,\n      maxSubdivisionLevel: view.tileLayer.maxSubdivisionLevel\n    });\n\n    _this.view.addLayer(layer); // TODO : should this promise be returned by constructor so that user can use it ?\n    // Give the focus back to the main view. Indeed, `View` constructor takes the focus, and we don't want the focus\n    // on the latest created `View`, which is the minimap view.\n\n\n    view.domElement.focus(); // Prevent the minimap domElement to get focus when clicked, and prevent click event to be propagated to the\n    // main view controls.\n\n    _this.domElement.addEventListener('pointerdown', function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }); // Store minimap view camera3D in constant for code convenience.\n\n\n    var camera3D = _this.view.camera.camera3D; // ---------- UPDATE MINIMAP VIEW WHEN UPDATING THE MAIN VIEW : ----------\n    // The minimal and maximal value the minimap camera3D zoom can reach in order to stay in the scale limits.\n\n    var initialScale = _this.view.getScale(options.pitch);\n\n    var minZoom = camera3D.zoom * _this.maxScale / initialScale;\n    var maxZoom = camera3D.zoom * _this.minScale / initialScale; // Coordinates used to transform position vectors from the main view CRS to the minimap view CRS.\n\n    var mainViewCoordinates = new Coordinates(view.referenceCrs);\n    var viewCoordinates = new Coordinates(_this.view.referenceCrs);\n    var targetPosition = view.controls.getCameraTargetPosition();\n    view.addFrameRequester(MAIN_LOOP_EVENTS.AFTER_RENDER, function () {\n      // Update minimap camera zoom\n      var distance = view.camera.camera3D.position.distanceTo(targetPosition);\n      var scale = view.getScaleFromDistance(options.pitch, distance);\n      camera3D.zoom = _this.zoomRatio * maxZoom * scale / _this.minScale;\n      camera3D.zoom = Math.min(Math.max(camera3D.zoom, minZoom), maxZoom);\n      camera3D.updateProjectionMatrix(); // Update minimap camera position.\n\n      mainViewCoordinates.setFromVector3(view.controls.getCameraTargetPosition());\n      mainViewCoordinates.as(_this.view.referenceCrs, viewCoordinates);\n      camera3D.position.x = viewCoordinates.x;\n      camera3D.position.y = viewCoordinates.y;\n      camera3D.updateMatrixWorld(true);\n\n      _this.view.notifyChange(camera3D);\n    });\n    return _this;\n  }\n\n  return _createClass(Minimap);\n}(Widget);\n\nexport default Minimap;"],"names":["root","factory","exports","module","define","amd","self","Widget","view","options","arguments","length","undefined","defaultOptions","this","parentElement","domElement","position","includes","console","warn","concat","document","createElement","appendChild","style","width","size","height","positionArray","split","classList","add","left","offsetWidth","top","offsetHeight","translate","transform","x","y","DEFAULT_OPTIONS","body","displayCompass","display3DToggle","displayZoomIn","displayZoomOut","animationDuration","direction","_Widget","Navigation","Derived","hasNativeReflectConstruct","_super","Reflect","construct","sham","Proxy","Boolean","prototype","valueOf","call","e","_isNativeReflectConstruct","result","Super","NewTarget","constructor","apply","_this","id","compass","addButton","controls","lookAtCoordinate","heading","tilt","time","addEventListener","event","switch3dButton","getTilt","innerHTML","zoomInButton","zoom","Math","min","getZoom","zoomOutButton","max","key","value","content","actionOnClick","parentId","buttonBar","getElementById","addButtonBar","button","className","minScale","maxScale","zoomRatio","Minimap","layer","isGlobeView","Error","isColorLayer","cursor","cursorWrapper","HTMLElement","PlanarView","source","extent","camera","type","placement","noControls","maxSubdivisionLevel","tileLayer","addLayer","focus","stopPropagation","preventDefault","camera3D","initialScale","getScale","pitch","minZoom","maxZoom","mainViewCoordinates","Coordinates","referenceCrs","viewCoordinates","targetPosition","getCameraTargetPosition","addFrameRequester","distance","distanceTo","scale","getScaleFromDistance","updateProjectionMatrix","setFromVector3","as","updateMatrixWorld","notifyChange"],"sourceRoot":""}